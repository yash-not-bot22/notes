{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\project3_react\\\\inotebook\\\\frontend\\\\src\\\\context\\\\setnote.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Notecontext from './notecontext';\nimport { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Setnote(props) {\n  _s();\n  const [notes, setnotes] = useState([]);\n  //add a note\n\n  //getallnotes\n\n  const getnotes = async () => {\n    const response = await fetch(\"https://notes-api-kappa.vercel.app/api/notes/fetchallnotes\", {\n      method: \"GET\",\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const newnotes = await response.json();\n    setnotes(newnotes);\n    // parses JSON response into native JavaScript objects\n  };\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`https://notes-api-kappa.vercel.app/api/notes/addnote`, {\n      method: \"POST\",\n      // *GET, POST, PUT, DELETE, etc.\n\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const notee = await response.json();\n    const note = {\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"_id\": notee._id\n    };\n    setnotes(notes.concat(note));\n  };\n\n  //delete a note\n  const deletenote = async id => {\n    const res = await fetch(`https://notes-api-kappa.vercel.app/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const newnotes = notes.filter(note => {\n      return id !== note._id;\n    });\n    setnotes(newnotes);\n  };\n  //edit a note\n  const editnote = async (title, description, tag, id) => {\n    const response = await fetch(`https://notes-api-kappa.vercel.app/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      // *GET, POST, PUT, DELETE, etc.\n\n      headers: {\n        \"auth-token\": localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    const json = await response.json(); // parses JSON response into native JavaScript objects\n\n    // setnotes(notes.concat(json))\n\n    let newnotes = JSON.parse(JSON.stringify(notes));\n    let i;\n    for (i = 0; i < newnotes.length; i++) {\n      if (newnotes[i]._id === id) {\n        newnotes[i].title = title;\n        newnotes[i].description = description;\n        newnotes[i].tag = tag;\n      }\n    }\n    setnotes(newnotes);\n  };\n  return /*#__PURE__*/_jsxDEV(Notecontext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deletenote,\n      getnotes,\n      editnote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Setnote, \"jM/Mkb55MEJ0WFPlN/uzkWcenqI=\");\n_c = Setnote;\nexport default Setnote;\nvar _c;\n$RefreshReg$(_c, \"Setnote\");","map":{"version":3,"names":["React","useEffect","Notecontext","useState","useNavigate","jsxDEV","_jsxDEV","Setnote","props","_s","notes","setnotes","getnotes","response","fetch","method","headers","localStorage","getItem","newnotes","json","addNote","title","description","tag","body","JSON","stringify","notee","note","_id","concat","deletenote","id","res","filter","editnote","parse","i","length","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react/project3_react/inotebook/frontend/src/context/setnote.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport Notecontext from './notecontext'\r\nimport { useState } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction Setnote(props) {\r\n \r\n  \r\n  const [notes,setnotes]= useState([])\r\n  //add a note\r\n  \r\n\r\n  \r\n  //getallnotes\r\n  \r\n\r\n  const getnotes=async()=> {\r\n   \r\n    const response = await fetch(\"https://notes-api-kappa.vercel.app/api/notes/fetchallnotes\", {\r\n      method: \"GET\", \r\n      \r\n      headers: {\r\n        \"auth-token\": localStorage.getItem('token'),\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      \r\n      \r\n    });\r\n    const newnotes= await response.json()\r\n    setnotes(newnotes)\r\n     // parses JSON response into native JavaScript objects\r\n  }\r\n  \r\n  \r\n  \r\n\r\n\r\n  \r\n  const addNote=async(title,description,tag)=>{\r\n\r\n    const response = await fetch(`https://notes-api-kappa.vercel.app/api/notes/addnote`, {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        \r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\":localStorage.getItem('token'),\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n       \r\n        body: JSON.stringify({title,description,tag}), // body data type must match \"Content-Type\" header\r\n      });\r\n      const notee= await response.json();\r\n\r\n    const note={\r\n      \"title\":title,\r\n      \"description\":description,\r\n      \"tag\":tag,\r\n      \"_id\":notee._id\r\n    }\r\n    \r\n    \r\n    setnotes(notes.concat(note))\r\n\r\n  }\r\n\r\n\r\n  //delete a note\r\n  const deletenote=async(id)=>{\r\n    const res=  await fetch(`https://notes-api-kappa.vercel.app/api/notes/deletenote/${id}`,{\r\n      method: \"DELETE\",\r\n      headers:{\r\n        \"auth-token\": localStorage.getItem('token'),\r\n\r\n      }\r\n    }) ;\r\n\r\n    const newnotes=notes.filter((note)=>{return id!==note._id})\r\n    setnotes(newnotes)\r\n\r\n  }\r\n  //edit a note\r\n  const editnote= async(title,description,tag,id)=>{\r\n    \r\n    \r\n      const response = await fetch(`https://notes-api-kappa.vercel.app/api/notes/updatenote/${id}`, {\r\n        method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\r\n        \r\n        headers: {\r\n          \"auth-token\": localStorage.getItem('token'),\r\n           'Content-Type': 'application/json',\r\n        },\r\n       \r\n        body: JSON.stringify({title,description,tag}), // body data type must match \"Content-Type\" header\r\n      });\r\n      const json =await ( response.json()) // parses JSON response into native JavaScript objects\r\n    \r\n      \r\n\r\n    \r\n  \r\n     // setnotes(notes.concat(json))\r\n    \r\n    let newnotes=JSON.parse(JSON.stringify(notes))\r\n    let i;\r\n    for( i=0;i<newnotes.length;i++)\r\n    {\r\n      if(newnotes[i]._id===id)\r\n      {\r\n        newnotes[i].title=title;\r\n        newnotes[i].description=description;\r\n        newnotes[i].tag=tag;\r\n      }\r\n    }\r\n    \r\n    \r\n    setnotes(newnotes);\r\n  }\r\n\r\n  return (\r\n    <Notecontext.Provider value={{notes,addNote,deletenote,getnotes,editnote}}>\r\n      {props.children}\r\n    </Notecontext.Provider>\r\n    \r\n  )\r\n}\r\n\r\nexport default Setnote\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}